This is Info file perl.info, produced by Makeinfo-1.64 from the input
file Pmaster.texi.


File: perl.info,  Node: perldata,  Next: perlsyn,  Prev: perlfaq9,  Up: Top

NAME
====

perldata - Perl data types

DESCRIPTION
===========

Variable names
--------------

Perl has three data structures: scalars, arrays of scalars, and
associative arrays of scalars, known as "hashes".  Normal arrays are
indexed by number, starting with 0.  (Negative subscripts count from
the end.)  Hash arrays are indexed by string.

Values are usually referred to by name (or through a named reference).
The first character of the name tells you to what sort of data
structure it refers.  The rest of the name tells you the particular
value to which it refers.  Most often, it consists of a single
*identifier*, that is, a string beginning with a letter or underscore,
and containing letters, underscores, and digits.  In some cases, it may
be a chain of identifiers, separated by `::' (or by `'', but that's
deprecated); all but the last are interpreted as names of packages, to
locate the namespace in which to look up the final identifier (see
`Packages', *Note Perlmod: perlmod, for details).  It's possible to
substitute for a simple identifier an expression which produces a
reference to the value at runtime; this is described in more detail
below, and in `Packages', *Note Perlref: perlref.

There are also special variables whose names don't follow these rules,
so that they don't accidentally collide with one of your normal
variables.  Strings which match parenthesized parts of a regular
expression are saved under names containing only digits after the `$'
(see *Note Perlop: perlop, and *Note Perlre: perlre,).  In addition,
several special variables which provide windows into the inner working
of Perl have names containing punctuation characters (see *Note
Perlvar: perlvar,).

Scalar values are always named with '$', even when referring to a scalar
that is part of an array.  It works like the English word "the".  Thus
we have:

     $days                   # the simple scalar value "days"
     $days[28]               # the 29th element of array @days
     $days{'Feb'}           # the 'Feb' value from hash %days
     $#days                  # the last index of array @days

but entire arrays or array slices are denoted by '@', which works much
like the word "these" or "those":

     @days            # ($days[0], $days[1],... $days[n])
     @days[3,4,5]     # same as @days[3..5]
     @days{'a','c'}   # same as ($days{'a'},$days{'c'})

and entire hashes are denoted by '%':

     %days           # (key1, val1, key2, val2 ...)

In addition, subroutines are named with an initial '&', though this is
optional when it's otherwise unambiguous (just as "do" is often
redundant in English).  Symbol table entries can be named with an
initial '*', but you don't really care about that yet.

Every variable type has its own namespace.  You can, without fear of
conflict, use the same name for a scalar variable, an array, or a hash
(or, for that matter, a filehandle, a subroutine name, or a label).
This means that $foo and @foo are two different variables.  It also
means that `$foo[1]' is a part of @foo, not a part of $foo.  This may
seem a bit weird, but that's okay, because it is weird.

Because variable and array references always start with '$', '@', or
'%', the "reserved" words aren't in fact reserved with respect to
variable names.  (They ARE reserved with respect to labels and
filehandles, however, which don't have an initial special character.
You can't have a filehandle named "log", for instance.  Hint: you could
say `open(LOG,'logfile')' rather than `open(log,'logfile')'.  Using
uppercase filehandles also improves readability and protects you from
conflict with future reserved words.)  Case *IS* significant-"FOO",
"Foo", and "foo" are all different names.  Names that start with a
letter or underscore may also contain digits and underscores.

It is possible to replace such an alphanumeric name with an expression
that returns a reference to an object of that type.  For a description
of this, see *Note Perlref: perlref.

Names that start with a digit may contain only more digits.  Names
which do not start with a letter, underscore,  or digit are limited to
one character, e.g.,  $% or $$.  (Most of these one character names
have a predefined significance to Perl.  For instance, $$ is the
current process id.)

Context
-------

The interpretation of operations and values in Perl sometimes depends
on the requirements of the context around the operation or value.
There are two major contexts: scalar and list.  Certain operations
return list values in contexts wanting a list, and scalar values
otherwise.  (If this is true of an operation it will be mentioned in
the documentation for that operation.)  In other words, Perl overloads
certain operations based on whether the expected return value is
singular or plural.  (Some words in English work this way, like "fish"
and "sheep".)

In a reciprocal fashion, an operation provides either a scalar or a
list context to each of its arguments.  For example, if you say

     int( <STDIN> )

the integer operation provides a scalar context for the <STDIN>
operator, which responds by reading one line from STDIN and passing it
back to the integer operation, which will then find the integer value
of that line and return that.  If, on the other hand, you say

     sort( <STDIN> )

then the sort operation provides a list context for <STDIN>, which will
proceed to read every line available up to the end of file, and pass
that list of lines back to the sort routine, which will then sort those
lines and return them as a list to whatever the context of the sort was.

Assignment is a little bit special in that it uses its left argument to
determine the context for the right argument.  Assignment to a scalar
evaluates the righthand side in a scalar context, while assignment to
an array or array slice evaluates the righthand side in a list context.
Assignment to a list also evaluates the righthand side in a list
context.

User defined subroutines may choose to care whether they are being
called in a scalar or list context, but most subroutines do not need to
care, because scalars are automatically interpolated into lists.  See
`wantarray', *Note Perlfunc: perlfunc.

Scalar values
-------------

All data in Perl is a scalar or an array of scalars or a hash of
scalars.  Scalar variables may contain various kinds of singular data,
such as numbers, strings, and references.  In general, conversion from
one form to another is transparent.  (A scalar may not contain multiple
values, but may contain a reference to an array or hash containing
multiple values.) Because of the automatic conversion of scalars,
operations, and functions that return scalars don't need to care (and,
in fact, can't care) whether the context is looking for a string or a
number.

Scalars aren't necessarily one thing or another.  There's no place to
declare a scalar variable to be of type "string", or of type "number",
or type "filehandle", or anything else.  Perl is a contextually
polymorphic language whose scalars can be strings, numbers, or
references (which includes objects).  While strings and numbers are
considered pretty much the same thing for nearly all purposes,
references are strongly-typed uncastable pointers with builtin
reference-counting and destructor invocation.

A scalar value is interpreted as TRUE in the Boolean sense if it is not
the null string or the number 0 (or its string equivalent, "0").  The
Boolean context is just a special kind of scalar context.

There are actually two varieties of null scalars: defined and
undefined.  Undefined null scalars are returned when there is no real
value for something, such as when there was an error, or at end of
file, or when you refer to an uninitialized variable or element of an
array.  An undefined null scalar may become defined the first time you
use it as if it were defined, but prior to that you can use the
defined() operator to determine whether the value is defined or not.

To find out whether a given string is a valid nonzero number, it's
usually enough to test it against both numeric 0 and also lexical "0"
(although this will cause -w noises).  That's because strings that
aren't numbers count as 0, just as they do in *awk*:

     if ($str == 0 && $str ne "0")  {
             warn "That doesn't look like a number";
     }

That's usually preferable because otherwise you won't treat IEEE
notations like `NaN' or `Infinity' properly.  At other times you might
prefer to use a regular expression to check whether data is numeric.
See *Note Perlre: perlre, for details on regular expressions.

     warn "has nondigits"    if     /\D/;
     warn "not a whole number"   unless /^\d+$/;
     warn "not an integer"       unless /^[+-]?\d+$/
     warn "not a decimal number" unless /^[+-]?\d+\.?\d*$/
     warn "not a C float"
             unless /^([+-]?)(?=\d|\.\d)\d*(\.\d*)?([Ee]([+-]?\d+))?$/;

The length of an array is a scalar value.  You may find the length of
array @days by evaluating `$#days', as in *csh*.  (Actually, it's not
the length of the array, it's the subscript of the last element, because
there is (ordinarily) a 0th element.)  Assigning to `$#days' changes the
length of the array.  Shortening an array by this method destroys
intervening values.  Lengthening an array that was previously shortened
*NO LONGER* recovers the values that were in those elements.  (It used
to in Perl 4, but we had to break this to make sure destructors were
called when expected.)  You can also gain some measure of efficiency by
pre-extending an array that is going to get big.  (You can also extend
an array by assigning to an element that is off the end of the array.)
You can truncate an array down to nothing by assigning the null list ()
to it.  The following are equivalent:

     @whatever = ();
     $#whatever = -1;

If you evaluate a named array in a scalar context, it returns the
length of the array.  (Note that this is not true of lists, which
return the last value, like the C comma operator.)  The following is
always true:

     scalar(@whatever) == $#whatever - $[ + 1;

Version 5 of Perl changed the semantics of $[: files that don't set the
value of $[ no longer need to worry about whether another file changed
its value.  (In other words, use of $[ is deprecated.) So in general
you can assume that

     scalar(@whatever) == $#whatever + 1;

Some programmers choose to use an explicit conversion so nothing's left
to doubt:

     $element_count = scalar(@whatever);

If you evaluate a hash in a scalar context, it returns a value which is
true if and only if the hash contains any key/value pairs.  (If there
are any key/value pairs, the value returned is a string consisting of
the number of used buckets and the number of allocated buckets,
separated by a slash.  This is pretty much useful only to find out
whether Perl's (compiled in) hashing algorithm is performing poorly on
your data set.  For example, you stick 10,000 things in a hash, but
evaluating %HASH in scalar context reveals "1/16", which means only one
out of sixteen buckets has been touched, and presumably contains all
10,000 of your items.  This isn't supposed to happen.)

Scalar value constructors
-------------------------

Numeric literals are specified in any of the customary floating point or
integer formats:

     12345
     12345.67
     .23E-10
     0xffff          # hex
     0377            # octal
     4_294_967_296   # underline for legibility

String literals are usually delimited by either single or double
quotes.  They work much like shell quotes: double-quoted string
literals are subject to backslash and variable substitution;
single-quoted strings are not (except for "`\''" and "`\\'").  The
usual Unix backslash rules apply for making characters such as newline,
tab, etc., as well as some more exotic forms.  See `Quote and Quotelike
Operators', *Note Perlop: perlop, for a list.

Octal or hex representations in string literals (e.g. '0xffff') are not
automatically converted to their integer representation.  The hex() and
oct() functions make these conversions for you.  See `hex', *Note
Perlfunc: perlfunc, and `oct', *Note Perlfunc: perlfunc, for more
details.

You can also embed newlines directly in your strings, i.e., they can end
on a different line than they begin.  This is nice, but if you forget
your trailing quote, the error will not be reported until Perl finds
another line containing the quote character, which may be much further
on in the script.  Variable substitution inside strings is limited to
scalar variables, arrays, and array slices.  (In other words, names
beginning with $ or @, followed by an optional bracketed expression as
a subscript.)  The following code segment prints out "The price is
$100."

     $Price = '$100';      # not interpreted
     print "The price is $Price.\n"; # interpreted

As in some shells, you can put curly brackets around the name to
delimit it from following alphanumerics.  In fact, an identifier within
such curlies is forced to be a string, as is any single identifier
within a hash subscript.  Our earlier example,

     $days{'Feb'}

can be written as

     $days{Feb}

and the quotes will be assumed automatically.  But anything more
complicated in the subscript will be interpreted as an expression.

Note that a single-quoted string must be separated from a preceding
word by a space, because single quote is a valid (though deprecated)
character in a variable name (see `Packages', *Note Perlmod: perlmod,).

Three special literals are __FILE__, __LINE__, and __PACKAGE__, which
represent the current filename, line number, and package name at that
point in your program.  They may be used only as separate tokens; they
will not be interpolated into strings.  If there is no current package
(due to a `package;' directive), __PACKAGE__ is the undefined value.

The tokens __END__ and __DATA__ may be used to indicate the logical end
of the script before the actual end of file.  Any following text is
ignored, but may be read via a DATA filehandle: main::DATA for __END__,
or PACKNAME::DATA (where PACKNAME is the current package) for __DATA__.
The two control characters ^D and ^Z are synonyms for __END__ (or
__DATA__ in a module).  See `SelfLoader' in this node for more
description of __DATA__, and an example of its use.  Note that you
cannot read from the DATA filehandle in a BEGIN block: the BEGIN block
is executed as soon as it is seen (during compilation), at which point
the corresponding __DATA__ (or __END__) token has not yet been seen.

A word that has no other interpretation in the grammar will be treated
as if it were a quoted string.  These are known as "barewords".  As
with filehandles and labels, a bareword that consists entirely of
lowercase letters risks conflict with future reserved words, and if you
use the -w switch, Perl will warn you about any such words.  Some
people may wish to outlaw barewords entirely.  If you say

     use strict 'subs';

then any bareword that would NOT be interpreted as a subroutine call
produces a compile-time error instead.  The restriction lasts to the
end of the enclosing block.  An inner block may countermand this by
saying `no strict 'subs''.

Array variables are interpolated into double-quoted strings by joining
all the elements of the array with the delimiter specified in the $"
variable ($LIST_SEPARATOR in English), space by default.  The following
are equivalent:

     $temp = join($",@ARGV);
     system "echo $temp";
     
     system "echo @ARGV";

Within search patterns (which also undergo double-quotish substitution)
there is a bad ambiguity:  Is `/$foo[bar]/' to be interpreted as
`/${foo}[bar]/' (where `[bar]' is a character class for the regular
expression) or as `/${foo[bar]}/' (where `[bar]' is the subscript to
array @foo)?  If @foo doesn't otherwise exist, then it's obviously a
character class.  If @foo exists, Perl takes a good guess about `[bar]',
and is almost always right.  If it does guess wrong, or if you're just
plain paranoid, you can force the correct interpretation with curly
brackets as above.

A line-oriented form of quoting is based on the shell "here-doc"
syntax.  Following a `<<' you specify a string to terminate the quoted
material, and all lines following the current line down to the
terminating string are the value of the item.  The terminating string
may be either an identifier (a word), or some quoted text.  If quoted,
the type of quotes you use determines the treatment of the text, just
as in regular quoting.  An unquoted identifier works like double
quotes.  There must be no space between the `<<' and the identifier.
(If you put a space it will be treated as a null identifier, which is
valid, and matches the first empty line.)  The terminating string must
appear by itself (unquoted and with no surrounding whitespace) on the
terminating line.

     print <<EOF;
         The price is $Price.
         EOF
     
     print <<"EOF";  # same as above
         The price is $Price.
         EOF
     
     print <<`EOC`;        # execute commands
         echo hi there
         echo lo there
         EOC
     
     print <<"foo", <<"bar"; # you can stack them
         I said foo.
         foo
         I said bar.
         bar
     
     myfunc(<<"THIS", 23, <<'THAT');
         Here's a line
         or two.
         THIS
         and here's another.
         THAT

Just don't forget that you have to put a semicolon on the end to finish
the statement, as Perl doesn't know you're not going to try to do this:

     print <<ABC
         179231
         ABC
     + 20;

List value constructors
-----------------------

List values are denoted by separating individual values by commas (and
enclosing the list in parentheses where precedence requires it):

     (LIST)

In a context not requiring a list value, the value of the list literal
is the value of the final element, as with the C comma operator.  For
example,

     @foo = ('cc', '-E', $bar);

assigns the entire list value to array foo, but

     $foo = ('cc', '-E', $bar);

assigns the value of variable bar to variable foo.  Note that the value
of an actual array in a scalar context is the length of the array; the
following assigns the value 3 to $foo:

     @foo = ('cc', '-E', $bar);
     $foo = @foo;           # $foo gets 3

You may have an optional comma before the closing parenthesis of a list
literal, so that you can say:

     @foo = (
             1,
             2,
             3,
     );

LISTs do automatic interpolation of sublists.  That is, when a LIST is
evaluated, each element of the list is evaluated in a list context, and
the resulting list value is interpolated into LIST just as if each
individual element were a member of LIST.  Thus arrays lose their
identity in a LIST-the list

     (@foo,@bar,&SomeSub)

contains all the elements of @foo followed by all the elements of @bar,
followed by all the elements returned by the subroutine named SomeSub
when it's called in a list context.  To make a list reference that does
*NOT* interpolate, see *Note Perlref: perlref.

The null list is represented by ().  Interpolating it in a list has no
effect.  Thus ((),(),()) is equivalent to ().  Similarly, interpolating
an array with no elements is the same as if no array had been
interpolated at that point.

A list value may also be subscripted like a normal array.  You must put
the list in parentheses to avoid ambiguity.  For example:

     # Stat returns list value.
     $time = (stat($file))[8];
     
     # SYNTAX ERROR HERE.
     $time = stat($file)[8];  # OOPS, FORGOT PARENTHESES
     
     # Find a hex digit.
     $hexdigit = ('a','b','c','d','e','f')[$digit-10];
     
     # A "reverse comma operator".
     return (pop(@foo),pop(@foo))[0];

You may assign to undef in a list.  This is useful for throwing away
some of the return values of a function:

     ($dev, $ino, undef, undef, $uid, $gid) = stat($file);

Lists may be assigned to if and only if each element of the list is
legal to assign to:

     ($a, $b, $c) = (1, 2, 3);
     
     ($map{'red'}, $map{'blue'}, $map{'green'}) = (0x00f, 0x0f0, 0xf00);

Array assignment in a scalar context returns the number of elements
produced by the expression on the right side of the assignment:

     $x = (($foo,$bar) = (3,2,1));   # set $x to 3, not 2
     $x = (($foo,$bar) = f());               # set $x to f()'s return count

This is very handy when you want to do a list assignment in a Boolean
context, because most list functions return a null list when finished,
which when assigned produces a 0, which is interpreted as FALSE.

The final element may be an array or a hash:

     ($a, $b, @rest) = split;
     local($a, $b, %rest) = @_;

You can actually put an array or hash anywhere in the list, but the
first one in the list will soak up all the values, and anything after
it will get a null value.  This may be useful in a local() or my().

A hash literal contains pairs of values to be interpreted as a key and
a value:

     # same as map assignment above
     %map = ('red',0x00f,'blue',0x0f0,'green',0xf00);

While literal lists and named arrays are usually interchangeable, that's
not the case for hashes.  Just because you can subscript a list value
like a normal array does not mean that you can subscript a list value
as a hash.  Likewise, hashes included as parts of other lists (including
parameters lists and return lists from functions) always flatten out
into key/value pairs.  That's why it's good to use references sometimes.

It is often more readable to use the C<=>> operator between key/value
pairs.  The C<=>> operator is mostly just a more visually distinctive
synonym for a comma, but it also arranges for its left-hand operand to
be interpreted as a string, if it's a bareword which would be a legal
identifier.  This makes it nice for initializing hashes:

     %map = (
                      red   => 0x00f,
                      blue  => 0x0f0,
                      green => 0xf00,
        );

or for initializing hash references to be used as records:

     $rec = {
                     witch => 'Mable the Merciless',
                     cat   => 'Fluffy the Ferocious',
                     date  => '10/31/1776',
     };

or for using call-by-named-parameter to complicated functions:

     $field = $query->radio_group(
                    name      => 'group_name',
                 values    => ['eenie','meenie','minie'],
                 default   => 'meenie',
                 linebreak => 'true',
                 labels    => \%labels
     );

Note that just because a hash is initialized in that order doesn't mean
that it comes out in that order.  See `sort', *Note Perlfunc: perlfunc,
for examples of how to arrange for an output ordering.

Typeglobs and Filehandles
-------------------------

Perl uses an internal type called a *typeglob* to hold an entire symbol
table entry.  The type prefix of a typeglob is a *, because it
represents all types.  This used to be the preferred way to pass arrays
and hashes by reference into a function, but now that we have real
references, this is seldom needed.  It also used to be the preferred
way to pass filehandles into a function, but now that we have the
*foo{THING} notation it isn't often needed for that, either.  It is
still needed to pass new filehandles into functions (*HANDLE{IO} only
works if HANDLE has already been used).

If you need to use a typeglob to save away a filehandle, do it this way:

     $fh = *STDOUT;

or perhaps as a real reference, like this:

     $fh = \*STDOUT;

This is also a way to create a local filehandle.  For example:

     sub newopen {
             my $path = shift;
             local *FH;  # not my!
             open (FH, $path) || return undef;
             return *FH;
     }
     $fh = newopen('/etc/passwd');

Another way to create local filehandles is with IO::Handle and its ilk,
see the bottom of `open()', *Note Perlfunc: perlfunc.

See *Note Perlref: perlref, *Note Perlsub: perlsub, and `"Symbol
Tables"', *Note Perlmod: perlmod, for more discussion on typeglobs.


File: perl.info,  Node: perlsyn,  Next: perlop,  Prev: perldata,  Up: Top

NAME
====

perlsyn - Perl syntax

DESCRIPTION
===========

A Perl script consists of a sequence of declarations and statements.
The only things that need to be declared in Perl are report formats and
subroutines.  See the sections below for more information on those
declarations.  All uninitialized user-created objects are assumed to
start with a null or 0 value until they are defined by some explicit
operation such as assignment.  (Though you can get warnings about the
use of undefined values if you like.)  The sequence of statements is
executed just once, unlike in *sed* and *awk* scripts, where the
sequence of statements is executed for each input line.  While this
means that you must explicitly loop over the lines of your input file
(or files), it also means you have much more control over which files
and which lines you look at.  (Actually, I'm lying-it is possible to do
an implicit loop with either the -n or -p switch.  It's just not the
mandatory default like it is in *sed* and *awk*.)

Declarations
------------

Perl is, for the most part, a free-form language.  (The only exception
to this is format declarations, for obvious reasons.) Comments are
indicated by the "#" character, and extend to the end of the line.  If
you attempt to use `/* */' C-style comments, it will be interpreted
either as division or pattern matching, depending on the context, and
C++ `//' comments just look like a null regular expression, so don't do
that.

A declaration can be put anywhere a statement can, but has no effect on
the execution of the primary sequence of statements-declarations all
take effect at compile time.  Typically all the declarations are put at
the beginning or the end of the script.  However, if you're using
lexically-scoped private variables created with my(), you'll have to
make sure your format or subroutine definition is within the same block
scope as the my if you expect to be able to access those private
variables.

Declaring a subroutine allows a subroutine name to be used as if it
were a list operator from that point forward in the program.  You can
declare a subroutine without defining it by saying `sub name', thus:

     sub myname;
     $me = myname $0                 or die "can't get myname";

Note that it functions as a list operator, not as a unary operator; so
be careful to use `or' instead of `||' in this case.  However, if you
were to declare the subroutine as `sub myname ($)', then `myname' would
functonion as a unary operator, so either `or' or `||' would work.

Subroutines declarations can also be loaded up with the require
statement or both loaded and imported into your namespace with a use
statement.  See *Note Perlmod: perlmod, for details on this.

A statement sequence may contain declarations of lexically-scoped
variables, but apart from declaring a variable name, the declaration
acts like an ordinary statement, and is elaborated within the sequence
of statements as if it were an ordinary statement.  That means it
actually has both compile-time and run-time effects.

Simple statements
-----------------

The only kind of simple statement is an expression evaluated for its
side effects.  Every simple statement must be terminated with a
semicolon, unless it is the final statement in a block, in which case
the semicolon is optional.  (A semicolon is still encouraged there if
the block takes up more than one line, because you may eventually add
another line.) Note that there are some operators like `eval {}' and
`do {}' that look like compound statements, but aren't (they're just
TERMs in an expression), and thus need an explicit termination if used
as the last item in a statement.

Any simple statement may optionally be followed by a *SINGLE* modifier,
just before the terminating semicolon (or block ending).  The possible
modifiers are:

     if EXPR
     unless EXPR
     while EXPR
     until EXPR

The `if' and `unless' modifiers have the expected semantics, presuming
you're a speaker of English.  The `while' and `until' modifiers also
have the usual "while loop" semantics (conditional evaluated first),
except when applied to a do-BLOCK (or to the now-deprecated
do-SUBROUTINE statement), in which case the block executes once before
the conditional is evaluated.  This is so that you can write loops like:

     do {
             $line = <STDIN>;
             ...
     } until $line  eq ".\n";

See `do', *Note Perlfunc: perlfunc.  Note also that the loop control
statements described later will *NOT* work in this construct, because
modifiers don't take loop labels.  Sorry.  You can always wrap another
block around it to do that sort of thing.

Compound statements
-------------------

In Perl, a sequence of statements that defines a scope is called a
block.  Sometimes a block is delimited by the file containing it (in
the case of a required file, or the program as a whole), and sometimes
a block is delimited by the extent of a string (in the case of an eval).

But generally, a block is delimited by curly brackets, also known as
braces.  We will call this syntactic construct a BLOCK.

The following compound statements may be used to control flow:

     if (EXPR) BLOCK
     if (EXPR) BLOCK else BLOCK
     if (EXPR) BLOCK elsif (EXPR) BLOCK ... else BLOCK
     LABEL while (EXPR) BLOCK
     LABEL while (EXPR) BLOCK continue BLOCK
     LABEL for (EXPR; EXPR; EXPR) BLOCK
     LABEL foreach VAR (LIST) BLOCK
     LABEL BLOCK continue BLOCK

Note that, unlike C and Pascal, these are defined in terms of BLOCKs,
not statements.  This means that the curly brackets are *required*-no
dangling statements allowed.  If you want to write conditionals without
curly brackets there are several other ways to do it.  The following
all do the same thing:

     if (!open(FOO)) { die "Can't open $FOO: $!"; }
     die "Can't open $FOO: $!" unless open(FOO);
     open(FOO) or die "Can't open $FOO: $!";        # FOO or bust!
     open(FOO) ? 'hi mom' : die "Can't open $FOO: $!";
                             # a bit exotic, that last one

The `if' statement is straightforward.  Because BLOCKs are always
bounded by curly brackets, there is never any ambiguity about which
`if' an `else' goes with.  If you use `unless' in place of `if', the
sense of the test is reversed.

The `while' statement executes the block as long as the expression is
true (does not evaluate to the null string or 0 or "0").  The LABEL is
optional, and if present, consists of an identifier followed by a colon.
The LABEL identifies the loop for the loop control statements next,
last, and redo.  If the LABEL is omitted, the loop control statement
refers to the innermost enclosing loop.  This may include dynamically
looking back your call-stack at run time to find the LABEL.  Such
desperate behavior triggers a warning if you use the -w flag.

If there is a continue BLOCK, it is always executed just before the
conditional is about to be evaluated again, just like the third part of
a `for' loop in C.  Thus it can be used to increment a loop variable,
even when the loop has been continued via the next statement (which is
similar to the C continue statement).

Loop Control
------------

The next command is like the continue statement in C; it starts the
next iteration of the loop:

     LINE: while (<STDIN>) {
             next LINE if /^#/;      # discard comments
             ...
     }

The last command is like the `break' statement in C (as used in loops);
it immediately exits the loop in question.  The continue block, if any,
is not executed:

     LINE: while (<STDIN>) {
             last LINE if /^$/;      # exit when done with header
             ...
     }

The redo command restarts the loop block without evaluating the
conditional again.  The continue block, if any, is *not* executed.
This command is normally used by programs that want to lie to themselves
about what was just input.

For example, when processing a file like `/etc/termcap'.  If your input
lines might end in backslashes to indicate continuation, you want to
skip ahead and get the next record.

     while (<>) {
             chomp;
             if (s/\\$//) {
                 $_ .= <>;
                 redo unless eof();
             }
             # now process $_
     }

which is Perl short-hand for the more explicitly written version:

     LINE: while (defined($line = <ARGV>)) {
             chomp($line);
             if ($line =~ s/\\$//) {
                 $line .= <ARGV>;
                 redo LINE unless eof(); # not eof(ARGV)!
             }
             # now process $line
     }

Or here's a simpleminded Pascal comment stripper (warning: assumes no {
or } in strings).

     LINE: while (<STDIN>) {
             while (s|({.*}.*){.*}|$1 |) {}
             s|{.*}| |;
             if (s|{.*| |) {
                 $front = $_;
                 while (<STDIN>) {
                     if (/}/) {    # end of comment?
                         s|^|$front{|;
                         redo LINE;
                     }
                 }
             }
             print;
     }

Note that if there were a continue block on the above code, it would get
executed even on discarded lines.

If the word `while' is replaced by the word `until', the sense of the
test is reversed, but the conditional is still tested before the first
iteration.

The form `while/if BLOCK BLOCK', available in Perl 4, is no longer
available.   Replace any occurrence of `if BLOCK' by `if (do BLOCK)'.

For Loops
---------

Perl's C-style `for' loop works exactly like the corresponding `while'
loop; that means that this:

     for ($i = 1; $i < 10; $i++) {
             ...
     }

is the same as this:

     $i = 1;
     while ($i < 10) {
             ...
     } continue {
             $i++;
     }

(There is one minor difference: The first form implies a lexical scope
for variables declared with my in the initialization expression.)

Besides the normal array index looping, `for' can lend itself to many
other interesting applications.  Here's one that avoids the problem you
get into if you explicitly test for end-of-file on an interactive file
descriptor causing your program to appear to hang.

     $on_a_tty = -t STDIN && -t STDOUT;
     sub prompt { print "yes? " if $on_a_tty }
     for ( prompt(); <STDIN>; prompt() ) {
             # do something
     }

Foreach Loops
-------------

The `foreach' loop iterates over a normal list value and sets the
variable VAR to be each element of the list in turn.  If the variable
is preceded with the keyword my, then it is lexically scoped, and is
therefore visible only within the loop.  Otherwise, the variable is
implicitly local to the loop and regains its former value upon exiting
the loop.  If the variable was previously declared with my, it uses
that variable instead of the global one, but it's still localized to
the loop.  (Note that a lexically scoped variable can cause problems
with you have subroutine or format declarations.)

The `foreach' keyword is actually a synonym for the `for' keyword, so
you can use `foreach' for readability or `for' for brevity.  If VAR is
omitted, $_ is set to each value.  If LIST is an actual array (as
opposed to an expression returning a list value), you can modify each
element of the array by modifying VAR inside the loop.  That's because
the `foreach' loop index variable is an implicit alias for each item in
the list that you're looping over.

Examples:

     for (@ary) { s/foo/bar/ }
     
     foreach my $elem (@elements) {
             $elem *= 2;
     }
     
     for $count (10,9,8,7,6,5,4,3,2,1,'BOOM') {
             print $count, "\n"; sleep(1);
     }
     
     for (1..15) { print "Merry Christmas\n"; }
     
     foreach $item (split(/:[\\\n:]*/, $ENV{TERMCAP})) {
             print "Item: $item\n";
     }

Here's how a C programmer might code up a particular algorithm in Perl:

     for (my $i = 0; $i < @ary1; $i++) {
             for (my $j = 0; $j < @ary2; $j++) {
                 if ($ary1[$i] > $ary2[$j]) {
                     last; # can't go to outer :-(
                 }
                 $ary1[$i] += $ary2[$j];
             }
             # this is where that last takes me
     }

Whereas here's how a Perl programmer more comfortable with the idiom
might do it:

     OUTER: foreach my $wid (@ary1) {
     INNER:   foreach my $jet (@ary2) {
                     next OUTER if $wid > $jet;
                     $wid += $jet;
                  }
               }

See how much easier this is?  It's cleaner, safer, and faster.  It's
cleaner because it's less noisy.  It's safer because if code gets added
between the inner and outer loops later on, the new code won't be
accidentally executed.  The next explicitly iterates the other loop
rather than merely terminating the inner one.  And it's faster because
Perl executes a `foreach' statement more rapidly than it would the
equivalent `for' loop.

Basic BLOCKs and Switch Statements
----------------------------------

A BLOCK by itself (labeled or not) is semantically equivalent to a loop
that executes once.  Thus you can use any of the loop control
statements in it to leave or restart the block.  (Note that this is
*NOT* true in `eval{}', `sub{}', or contrary to popular belief `do{}'
blocks, which do *NOT* count as loops.)  The continue block is optional.

The BLOCK construct is particularly nice for doing case structures.

     SWITCH: {
             if (/^abc/) { $abc = 1; last SWITCH; }
             if (/^def/) { $def = 1; last SWITCH; }
             if (/^xyz/) { $xyz = 1; last SWITCH; }
             $nothing = 1;
     }

There is no official switch statement in Perl, because there are
already several ways to write the equivalent.  In addition to the
above, you could write

     SWITCH: {
             $abc = 1, last SWITCH  if /^abc/;
             $def = 1, last SWITCH  if /^def/;
             $xyz = 1, last SWITCH  if /^xyz/;
             $nothing = 1;
     }

(That's actually not as strange as it looks once you realize that you
can use loop control "operators" within an expression,  That's just the
normal C comma operator.)

or

     SWITCH: {
             /^abc/ && do { $abc = 1; last SWITCH; };
             /^def/ && do { $def = 1; last SWITCH; };
             /^xyz/ && do { $xyz = 1; last SWITCH; };
             $nothing = 1;
     }

or formatted so it stands out more as a "proper" switch statement:

     SWITCH: {
             /^abc/      && do {
                                 $abc = 1;
                                 last SWITCH;
                            };
     
     /^def/      && do {
                         $def = 1;
                         last SWITCH;
                    };
     
     /^xyz/      && do {
                         $xyz = 1;
                         last SWITCH;
                     };
     $nothing = 1;
         }

or

     SWITCH: {
             /^abc/ and $abc = 1, last SWITCH;
             /^def/ and $def = 1, last SWITCH;
             /^xyz/ and $xyz = 1, last SWITCH;
             $nothing = 1;
     }

or even, horrors,

     if (/^abc/)
             { $abc = 1 }
     elsif (/^def/)
             { $def = 1 }
     elsif (/^xyz/)
             { $xyz = 1 }
     else
             { $nothing = 1 }

A common idiom for a switch statement is to use `foreach''s aliasing to
make a temporary assignment to $_ for convenient matching:

     SWITCH: for ($where) {
                     /In Card Names/     && do { push @flags, '-e'; last; };
                     /Anywhere/          && do { push @flags, '-h'; last; };
                     /In Rulings/        && do {                    last; };
                     die "unknown value for form variable where: `$where'";
                 }

Another interesting approach to a switch statement is arrange for a do
block to return the proper value:

     $amode = do {
             if     ($flag & O_RDONLY) { "r" }
             elsif  ($flag & O_WRONLY) { ($flag & O_APPEND) ? "a" : "w" }
             elsif  ($flag & O_RDWR)   {
                 if ($flag & O_CREAT)  { "w+" }
                 else                  { ($flag & O_APPEND) ? "a+" : "r+" }
             }
     };

Goto
----

Although not for the faint of heart, Perl does support a goto statement.
A loop's LABEL is not actually a valid target for a goto; it's just the
name of the loop.  There are three forms: goto-LABEL, goto-EXPR, and
goto-&NAME.

The goto-LABEL form finds the statement labeled with LABEL and resumes
execution there.  It may not be used to go into any construct that
requires initialization, such as a subroutine or a foreach loop.  It
also can't be used to go into a construct that is optimized away.  It
can be used to go almost anywhere else within the dynamic scope,
including out of subroutines, but it's usually better to use some other
construct such as last or die.  The author of Perl has never felt the
need to use this form of goto (in Perl, that is-C is another matter).

The goto-EXPR form expects a label name, whose scope will be resolved
dynamically.  This allows for computed gotos per FORTRAN, but isn't
necessarily recommended if you're optimizing for maintainability:

     goto ("FOO", "BAR", "GLARCH")[$i];

The goto-&NAME form is highly magical, and substitutes a call to the
named subroutine for the currently running subroutine.  This is used by
AUTOLOAD() subroutines that wish to load another subroutine and then
pretend that the other subroutine had been called in the first place
(except that any modifications to @_ in the current subroutine are
propagated to the other subroutine.)  After the goto, not even caller()
will be able to tell that this routine was called first.

In almost all cases like this, it's usually a far, far better idea to
use the structured control flow mechanisms of next, last, or redo
instead of resorting to a goto.  For certain applications, the catch
and throw pair of `eval{}' and die() for exception processing can also
be a prudent approach.

PODs: Embedded Documentation
----------------------------

Perl has a mechanism for intermixing documentation with source code.
While it's expecting the beginning of a new statement, if the compiler
encounters a line that begins with an equal sign and a word, like this

     =head1 Here There Be Pods!

Then that text and all remaining text up through and including a line
beginning with `=cut' will be ignored.  The format of the intervening
text is described in *Note Perlpod: perlpod.

This allows you to intermix your source code and your documentation
text freely, as in

     =item snazzle($)
     
     The snazzle() function will behave in the most spectacular
     form that you can possibly imagine, not even excepting
     cybernetic pyrotechnics.
     
     =cut back to the compiler, nuff of this pod stuff!
     
     sub snazzle($) {
             my $thingie = shift;
             .........
     }

Note that pod translators should look at only paragraphs beginning with
a pod directive (it makes parsing easier), whereas the compiler
actually knows to look for pod escapes even in the middle of a
paragraph.  This means that the following secret stuff will be ignored
by both the compiler and the translators.

     $a=3;
     =secret stuff
      warn "Neither POD nor CODE!?"
     =cut back
     print "got $a\n";

You probably shouldn't rely upon the warn() being podded out forever.
Not all pod translators are well-behaved in this regard, and perhaps
the compiler will become pickier.

One may also use pod directives to quickly comment out a section of
code.

Plain Old Comments (Not!)
-------------------------

Much like the C preprocessor, perl can process line directives.  Using
this, one can control perl's idea of filenames and line numbers in
error or warning messages (especially for strings that are processed
with eval()).  The syntax for this mechanism is the same as for most C
preprocessors: it matches the regular expression
`/^#\s*line\s+(\d+)\s*(?:\s"([^"]*)")?/' with `$1' being the line
number for the next line, and `$2' being the optional filename
(specified within quotes).

Here are some examples that you should be able to type into your command
shell:

     % perl
     # line 200 "bzzzt"
     # the `#' on the previous line must be the first char on line
     die 'foo';
     __END__
     foo at bzzzt line 201.
     
     % perl
     # line 200 "bzzzt"
     eval qq[\n#line 2001 ""\ndie 'foo']; print $@;
     __END__
     foo at - line 2001.
     
     % perl
     eval qq[\n#line 200 "foo bar"\ndie 'foo']; print $@;
     __END__
     foo at foo bar line 200.
     
     % perl
     # line 345 "goop"
     eval "\n#line " . __LINE__ . ' "' . __FILE__ ."\"\ndie 'foo'";
     print $@;
     __END__
     foo at goop line 345.

