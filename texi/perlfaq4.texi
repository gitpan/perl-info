@node perlfaq4, perlfaq5, perlfaq3, perlfaq
@unnumberedsec NAME
perlfaq4 - Data Manipulation ($Revision: 1.19 $, $Date: 1997/04/24 22:43:57 $)

@unnumberedsec DESCRIPTION
The section of the FAQ answers question related to the manipulation
of data as numbers, dates, strings, arrays, hashes, and miscellaneous
data issues.

@unnumberedsec Data: Numbers
@unnumberedsubsec Why am I getting long decimals (eg, 19.9499999999999) instead of the numbers I should be getting (eg, 19.95)?
Internally, your computer represents floating-point numbers in binary.
Floating-point numbers read in from a file, or appearing as literals
in your program, are converted from their decimal floating-point
representation (eg, 19.95) to the internal binary representation.

However, 19.95 can@'t be precisely represented as a binary
floating-point number, just like 1/3 can@'t be exactly represented as a
decimal floating-point number.  The computer@'s binary representation
of 19.95, therefore, isn@'t exactly 19.95.

When a floating-point number gets printed, the binary floating-point
representation is converted back to decimal.  These decimal numbers
are displayed in either the format you specify with printf(), or the
current output format for numbers (see @samp{"$#"}, @xref{perlvar,Perlvar}, if you use
print.  $# has a different default value in Perl5 than it did in
Perl4.  Changing $# yourself is deprecated.

This affects @strong{all} computer languages that represent decimal
floating-point numbers in binary, not just Perl.  Perl provides
arbitrary-precision decimal numbers with the Math::BigFloat module
(part of the standard Perl distribution), but mathematical operations
are consequently slower.

To get rid of the superfluous digits, just use a format (eg,
@code{printf("%.2f", 19.95)}) to get the required precision.

@unnumberedsubsec Why isn@'t my octal data interpreted correctly?
Perl only understands octal and hex numbers as such when they occur
as literals in your program.  If they are read in from somewhere and
assigned, no automatic conversion takes place.  You must explicitly
use oct() or hex() if you want the values converted.  oct() interprets
both hex ("0x350") numbers and octal ones ("0350" or even without the
leading "0", like "377"), while hex() only converts hexadecimal ones,
with or without a leading "0x", like "0x255", "3A", "ff", or "deadbeef".

This problem shows up most often when people try using chmod(), mkdir(),
umask(), or sysopen(), which all want permissions in octal.


@example
chmod(644,  $file);     # WRONG -- perl -w catches this
chmod(0644, $file);     # right
@end example

@unnumberedsubsec Does perl have a round function?  What about ceil() and floor()? Trig functions?
For rounding to a certain number of digits, sprintf() or printf() is
usually the easiest route.

The POSIX module (part of the standard perl distribution) implements
ceil(), floor(), and a number of other mathematical and trigonometric
functions.

In 5.000 to 5.003 Perls, trigonometry was done in the Math::Complex
module.  With 5.004, the Math::Trig module (part of the standard perl
distribution) implements the trigonometric functions. Internally it
uses the Math::Complex module and some functions can break out from
the real axis into the complex plane, for example the inverse sine of
2.

Rounding in financial applications can have serious implications, and
the rounding method used should be specified precisely.  In these
cases, it probably pays not to trust whichever system rounding is
being used by Perl, but to instead implement the rounding function you
need yourself.

@unnumberedsubsec How do I convert bits into ints?
To turn a string of 1s and 0s like @'10110110@' into a scalar containing
its binary value, use the pack() function (documented in
@samp{"pack"}, @xref{perlfunc,Perlfunc},):


@example
$decimal = pack(@'B8@', @'10110110@');
@end example

Here@'s an example of going the other way:


@example
$binary_string = join(@'@', unpack(@'B*@', "\x29"));
@end example

@unnumberedsubsec How do I multiply matrices?
Use the Math::Matrix or Math::MatrixReal modules (available from CPAN)
or the PDL extension (also available from CPAN).

@unnumberedsubsec How do I perform an operation on a series of integers?
To call a function on each element in an array, and collect the
results, use:


@example
@@results = map @{ my_func($_) @} @@array;
@end example

For example:


@example
@@triple = map @{ 3 * $_ @} @@single;
@end example

To call a function on each element of an array, but ignore the
results:


@example
foreach $iterator (@@array) @{
    &my_func($iterator);
@}
@end example

To call a function on each integer in a (small) range, you @strong{can} use:


@example
@@results = map @{ &my_func($_) @} (5 .. 25);
@end example

but you should be aware that the @code{..} operator creates an array of
all integers in the range.  This can take a lot of memory for large
ranges.  Instead use:


@example
@@results = ();
for ($i=5; $i < 500_005; $i++) @{
    push(@@results, &my_func($i));
@}
@end example

@unnumberedsubsec How can I output Roman numerals?
Get the http://www.perl.com/CPAN/modules/by-module/Roman module.

@unnumberedsubsec Why aren@'t my random numbers random?
The short explanation is that you@'re getting pseudorandom numbers, not
random ones, because that@'s how these things work.  A longer
explanation is available on
http://www.perl.com/CPAN/doc/FMTEYEWTK/random, courtesy of Tom
Phoenix.

You should also check out the Math::TrulyRandom module from CPAN.

@unnumberedsec Data: Dates
@unnumberedsubsec How do I find the week-of-the-year/day-of-the-year?
The day of the year is in the array returned by localtime() (see
@samp{"localtime"}, @xref{perlfunc,Perlfunc},):


@example
$day_of_year = (localtime(time()))[7];
@end example

or more legibly (in 5.004 or higher):


@example
use Time::localtime;
$day_of_year = localtime(time())->yday;
@end example

You can find the week of the year by dividing this by 7:


@example
$week_of_year = int($day_of_year / 7);
@end example

Of course, this believes that weeks start at zero.

@unnumberedsubsec How can I compare two date strings?
Use the Date::Manip or Date::DateCalc modules from CPAN.

@unnumberedsubsec How can I take a string and turn it into epoch seconds?
If it@'s a regular enough string that it always has the same format,
you can split it up and pass the parts to timelocal in the standard
Time::Local module.  Otherwise, you should look into one of the
Date modules from CPAN.

@unnumberedsubsec How can I find the Julian Day?
Neither Date::Manip nor Date::DateCalc deal with Julian days.
Instead, there is an example of Julian date calculation in
http://www.perl.com/CPAN/authors/David_Muir_Sharnoff/modules/Time/JulianDay.pm.gz,
which should help.

@unnumberedsubsec Does Perl have a year 2000 problem?
Not unless you use Perl to create one. The date and time functions
supplied with perl (gmtime and localtime) supply adequate information
to determine the year well beyond 2000 (2038 is when trouble strikes).
The year returned by these functions when used in an array context is
the year minus 1900. For years between 1910 and 1999 this @emph{happens}
to be a 2-digit decimal number. To avoid the year 2000 problem simply
do not treat the year as a 2-digit number.  It isn@'t.

When gmtime() and localtime() are used in a scalar context they return
a timestamp string that contains a fully-expanded year.  For example,
@code{$timestamp = gmtime(1005613200)} sets $timestamp to "Tue Nov 13 01:00:00
2001".  There@'s no year 2000 problem here.

@unnumberedsec Data: Strings
@unnumberedsubsec How do I validate input?
The answer to this question is usually a regular expression, perhaps
with auxiliary logic.  See the more specific questions (numbers, email
addresses, etc.) for details.

@unnumberedsubsec How do I unescape a string?
It depends just what you mean by "escape".  URL escapes are dealt with
in @xref{perlfaq9,Perlfaq9}.  Shell escapes with the backslash (\)
character are removed with:


@example
s/\\(.)/$1/g;
@end example

Note that this won@'t expand \n or \t or any other special escapes.

@unnumberedsubsec How do I remove consecutive pairs of characters?
To turn "abbcccd" into "abccd":


@example
s/(.)\1/$1/g;
@end example

@unnumberedsubsec How do I expand function calls in a string?
This is documented in @xref{perlref,Perlref}.  In general, this is fraught with
quoting and readability problems, but it is possible.  To interpolate
a subroutine call (in a list context) into a string:


@example
print "My sub returned @@@{[mysub(1,2,3)]@} that time.\n";
@end example

If you prefer scalar context, similar chicanery is also useful for
arbitrary expressions:


@example
print "That yields $@{\($n + 5)@} widgets\n";
@end example

See also "How can I expand variables in text strings?" in this section
of the FAQ.

@unnumberedsubsec How do I find matching/nesting anything?
This isn@'t something that can be tackled in one regular expression, no
matter how complicated.  To find something between two single characters,
a pattern like @code{/x([^x]*)x/} will get the intervening bits in $1. For
multiple ones, then something more like @code{/alpha(.*?)omega/} would
be needed.  But none of these deals with nested patterns, nor can they.
For that you@'ll have to write a parser.

@unnumberedsubsec How do I reverse a string?
Use reverse() in a scalar context, as documented in
@samp{reverse}, @xref{perlfunc,Perlfunc}.


@example
$reversed = reverse $string;
@end example

@unnumberedsubsec How do I expand tabs in a string?
You can do it the old-fashioned way:


@example
1 while $string =~ s/\t+/@' @' x (length($&) * 8 - length($@`) % 8)/e;
@end example

Or you can just use the Text::Tabs module (part of the standard perl
distribution).


@example
use Text::Tabs;
@@expanded_lines = expand(@@lines_with_tabs);
@end example

@unnumberedsubsec How do I reformat a paragraph?
Use Text::Wrap (part of the standard perl distribution):


@example
use Text::Wrap;
print wrap("\t", @'  @', @@paragraphs);
@end example

The paragraphs you give to Text::Wrap may not contain embedded
newlines.  Text::Wrap doesn@'t justify the lines (flush-right).

@unnumberedsubsec How can I access/change the first N letters of a string?
There are many ways.  If you just want to grab a copy, use
substr:


@example
$first_byte = substr($a, 0, 1);
@end example

If you want to modify part of a string, the simplest way is often to
use substr() as an lvalue:


@example
substr($a, 0, 3) = "Tom";
@end example

Although those with a regexp kind of thought process will likely prefer


@example
$a =~ s/^.../Tom/;
@end example

@unnumberedsubsec How do I change the Nth occurrence of something?
You have to keep track.  For example, let@'s say you want
to change the fifth occurrence of "whoever" or "whomever"
into "whosoever" or "whomsoever", case insensitively.


@example
$count = 0;
s@{((whom?)ever)@}@{
        ++$count == 5           # is it the 5th?
            ? "$@{2@}soever"    # yes, swap
            : $1                # renege and leave it there
@}igex;
@end example

@unnumberedsubsec How can I count the number of occurrences of a substring within a string?
There are a number of ways, with varying efficiency: If you want a
count of a certain single character (X) within a string, you can use the
tr/// function like so:


@example
$string = "ThisXlineXhasXsomeXx@'sXinXit":
$count = ($string =~ tr/X//);
print "There are $count X charcters in the string";
@end example

This is fine if you are just looking for a single character.  However,
if you are trying to count multiple character substrings within a
larger string, tr/// won@'t work.  What you can do is wrap a while()
loop around a global pattern match.  For example, let@'s count negative
integers:


@example
$string = "-9 55 48 -2 23 -76 4 14 -44";
while ($string =~ /-\d+/g) @{ $count++ @}
print "There are $count negative numbers in the string";
@end example

@unnumberedsubsec How do I capitalize all the words on one line?
To make the first letter of each word upper case:


@example
$line =~ s/\b(\w)/\U$1/g;
@end example

This has the strange effect of turning "@code{don@'t do it}" into "@code{Don@'T
Do It}".  Sometimes you might want this, instead (Suggested by Brian
Foy <comdog@@computerdog.com>):


@example
$string =~ s/ (
             (^\w)    #at the beginning of the line
               |      # or
             (\s\w)   #preceded by whitespace
               )
            /\U$1/xg;
$string =~ /([\w@']+)/\u\L$1/g;
@end example

To make the whole line upper case:


@example
$line = uc($line);
@end example

To force each word to be lower case, with the first letter upper case:


@example
$line =~ s/(\w+)/\u\L$1/g;
@end example

@unnumberedsubsec How can I split a [character] delimited string except when inside [character]? (Comma-separated files)
Take the example case of trying to split a string that is comma-separated
into its different fields.  (We@'ll pretend you said comma-separated, not
comma-delimited, which is different and almost never what you mean.) You
can@'t use @code{split(/,/)} because you shouldn@'t split if the comma is inside
quotes.  For example, take a data line like this:


@example
SAR001,"","Cimetrix, Inc","Bob Smith","CAM",N,8,1,0,7,"Error, Core Dumped"
@end example

Due to the restriction of the quotes, this is a fairly complex
problem.  Thankfully, we have Jeffrey Friedl, author of a highly
recommended book on regular expressions, to handle these for us.  He
suggests (assuming your string is contained in $text):


@example
@@new = ();
push(@@new, $+) while $text =~ m@{
    "([^\"\\]*(?:\\.[^\"\\]*)*)",?  # groups the phrase inside the quotes
  | ([^,]+),?
  | ,
@}gx;
push(@@new, undef) if substr($text,-1,1) eq @',@';
@end example

If you want to represent quotation marks inside a
quotation-mark-delimited field, escape them with backslashes (eg,
@code{"like \"this\""}.  Unescaping them is a task addressed earlier in
this section.

Alternatively, the Text::ParseWords module (part of the standard perl
distribution) lets you say:


@example
use Text::ParseWords;
@@new = quotewords(",", 0, $text);
@end example

@unnumberedsubsec How do I strip blank space from the beginning/end of a string?
The simplest approach, albeit not the fastest, is probably like this:


@example
$string =~ s/^\s*(.*?)\s*$/$1/;
@end example

It would be faster to do this in two steps:


@example
$string =~ s/^\s+//;
$string =~ s/\s+$//;
@end example

Or more nicely written as:


@example
for ($string) @{
        s/^\s+//;
        s/\s+$//;
@}
@end example

@unnumberedsubsec How do I extract selected columns from a string?
Use substr() or unpack(), both documented in @xref{perlfunc,Perlfunc}.

@unnumberedsubsec How do I find the soundex value of a string?
Use the standard Text::Soundex module distributed with perl.

@unnumberedsubsec How can I expand variables in text strings?
Let@'s assume that you have a string like:


@example
$text = @'this has a $foo in it and a $bar@';
$text =~ s/\$(\w+)/$@{$1@}/g;
@end example

Before version 5 of perl, this had to be done with a double-eval
substitution:


@example
$text =~ s/(\$\w+)/$1/eeg;
@end example

Which is bizarre enough that you@'ll probably actually need an EEG
afterwards. :-)

See also "How do I expand function calls in a string?" in this section
of the FAQ.

@unnumberedsubsec What@'s wrong with always quoting "$vars"?
The problem is that those double-quotes force stringification,
coercing numbers and references into strings, even when you
don@'t want them to be.

If you get used to writing odd things like these:


@example
print "$var";           # BAD
$new = "$old";          # BAD
somefunc("$var");       # BAD
@end example

You@'ll be in trouble.  Those should (in 99.8% of the cases) be
the simpler and more direct:


@example
print $var;
$new = $old;
somefunc($var);
@end example

Otherwise, besides slowing you down, you@'re going to break code when
the thing in the scalar is actually neither a string nor a number, but
a reference:


@example
func(\@@array);
sub func @{
        my $aref = shift;
        my $oref = "$aref";  # WRONG
@}
@end example

You can also get into subtle problems on those few operations in Perl
that actually do care about the difference between a string and a
number, such as the magical @code{++} autoincrement operator or the
syscall() function.

@unnumberedsubsec Why don@'t my <<HERE documents work?
Check for these three things:

@enumerate
@item There must be no space after the << part.
@item There (probably) should be a semicolon at the end.
@item You can@'t (easily) have any space in front of the tag.
@end enumerate
@unnumberedsec Data: Arrays
@unnumberedsubsec What is the difference between $array[1] and @@array[1]?
The former is a scalar value, the latter an array slice, which makes
it a list with one (scalar) value.  You should use $ when you want a
scalar value (most of the time) and @@ when you want a list with one
scalar value in it (very, very rarely; nearly never, in fact).

Sometimes it doesn@'t make a difference, but sometimes it does.
For example, compare:


@example
$good[0] = @`some program that outputs several lines@`;
@end example

with


@example
@@bad[0]  = @`same program that outputs several lines@`;
@end example

The -w flag will warn you about these matters.

@unnumberedsubsec How can I extract just the unique elements of an array?
There are several possible ways, depending on whether the array is
ordered and whether you wish to preserve the ordering.

@table @asis
@item a) If @@in is sorted, and you want @@out to be sorted:

@example
$prev = @'nonesuch@';
@@out = grep($_ ne $prev && ($prev = $_), @@in);
@end example

This is nice in that it doesn@'t use much extra memory,
simulating uniq(1)@'s behavior of removing only adjacent
duplicates.

@item b) If you don@'t know whether @@in is sorted:

@example
undef %saw;
@@out = grep(!$saw@{$_@}++, @@in);
@end example

@itemx c) Like (b), but @@in contains only small integers:

@example
@@out = grep(!$saw[$_]++, @@in);
@end example

@itemx d) A way to do (b) without any loops or greps:

@example
undef %saw;
@@saw@{@@in@} = ();
@@out = sort keys %saw;  # remove sort if undesired
@end example

@itemx e) Like (d), but @@in contains only small positive integers:

@example
undef @@ary;
@@ary[@@in] = @@in;
@@out = @@ary;
@end example

@end table
@unnumberedsubsec How can I tell whether an array contains a certain element?
There are several ways to approach this.  If you are going to make
this query many times and the values are arbitrary strings, the
fastest way is probably to invert the original array and keep an
associative array lying about whose keys are the first array@'s values.


@example
@@blues = qw/azure cerulean teal turquoise lapis-lazuli/;
undef %is_blue;
for (@@blues) @{ $is_blue@{$_@} = 1 @}
@end example

Now you can check whether $is_blue@{$some_color@}.  It might have been a
good idea to keep the blues all in a hash in the first place.

If the values are all small integers, you could use a simple indexed
array.  This kind of an array will take up less space:


@example
@@primes = (2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31);
undef @@is_tiny_prime;
for (@@primes) @{ $is_tiny_prime[$_] = 1; @}
@end example

Now you check whether $is_tiny_prime[$some_number].

If the values in question are integers instead of strings, you can save
quite a lot of space by using bit strings instead:


@example
@@articles = ( 1..10, 150..2000, 2017 );
undef $read;
grep (vec($read,$_,1) = 1, @@articles);
@end example

Now check whether @code{vec($read,$n,1)} is true for some @code{$n}.

Please do not use


@example
$is_there = grep $_ eq $whatever, @@array;
@end example

or worse yet


@example
$is_there = grep /$whatever/, @@array;
@end example

These are slow (checks every element even if the first matches),
inefficient (same reason), and potentially buggy (what if there are
regexp characters in $whatever?).

@unnumberedsubsec How do I compute the difference of two arrays?  How do I compute the intersection of two arrays?
Use a hash.  Here@'s code to do both and more.  It assumes that
each element is unique in a given array:


@example
@@union = @@intersection = @@difference = ();
%count = ();
foreach $element (@@array1, @@array2) @{ $count@{$element@}++ @}
foreach $element (keys %count) @{
        push @@union, $element;
        push @@@{ $count@{$element@} > 1 ? \@@intersection : \@@difference @}, $element;
@}
@end example

@unnumberedsubsec How do I find the first array element for which a condition is true?
You can use this if you care about the index:


@example
for ($i=0; $i < @@array; $i++) @{
    if ($array[$i] eq "Waldo") @{
            $found_index = $i;
        last;
    @}
@}
@end example

Now @code{$found_index} has what you want.

@unnumberedsubsec How do I handle linked lists?
In general, you usually don@'t need a linked list in Perl, since with
regular arrays, you can push and pop or shift and unshift at either end,
or you can use splice to add and/or remove arbitrary number of elements
at arbitrary points.

If you really, really wanted, you could use structures as described in
@xref{perldsc,Perldsc}, or @xref{perltoot,Perltoot}, and do just what the algorithm book tells you
to do.

@unnumberedsubsec How do I handle circular lists?
Circular lists could be handled in the traditional fashion with linked
lists, or you could just do something like this with an array:


@example
unshift(@@array, pop(@@array));  # the last shall be first
push(@@array, shift(@@array));   # and vice versa
@end example

@unnumberedsubsec How do I shuffle an array randomly?
Here@'s a shuffling algorithm which works its way through the list,
randomly picking another element to swap the current element with:


@example
srand;
@@new = ();
@@old = 1 .. 10;  # just a demo
while (@@old) @{
        push(@@new, splice(@@old, rand @@old, 1));
@}
@end example

For large arrays, this avoids a lot of the reshuffling:


@example
srand;
@@new = ();
@@old = 1 .. 10000;  # just a demo
for( @@old )@{
    my $r = rand @@new+1;
    push(@@new,$new[$r]);
    $new[$r] = $_;
@}
@end example

@unnumberedsubsec How do I process/modify each element of an array?
Use @code{for}/@code{foreach}:


@example
for (@@lines) @{
        s/foo/bar/;
        tr[a-z][A-Z];
@}
@end example

Here@'s another; let@'s compute spherical volumes:


@example
for (@@radii) @{
        $_ **= 3;
        $_ *= (4/3) * 3.14159;  # this will be constant folded
@}
@end example

@unnumberedsubsec How do I select a random element from an array?
Use the rand() function (see @samp{rand}, @xref{perlfunc,Perlfunc},):


@example
srand;                  # not needed for 5.004 and later
$index   = rand @@array;
$element = $array[$index];
@end example

@unnumberedsubsec How do I permute N elements of a list?
Here@'s a little program that generates all permutations
of all the words on each line of input.  The algorithm embodied
in the permut() function should work on any list:


@example
#!/usr/bin/perl -n
# permute - tchrist@@perl.com
permut([split], []);
sub permut @{
        my @@head = @@@{ $_[0] @};
        my @@tail = @@@{ $_[1] @};
        unless (@@head) @{
            # stop recursing when there are no elements in the head
            print "@@tail\n";
        @} else @{
            # for all elements in @@head, move one from @@head to @@tail
            # and call permut() on the new @@head and @@tail
            my(@@newhead,@@newtail,$i);
            foreach $i (0 .. $#head) @{
                @@newhead = @@head;
                @@newtail = @@tail;
                unshift(@@newtail, splice(@@newhead, $i, 1));
                permut([@@newhead], [@@newtail]);
            @}
        @}
@}
@end example

@unnumberedsubsec How do I sort an array by (anything)?
Supply a comparison function to sort() (described in @samp{sort}, @xref{perlfunc,Perlfunc},):


@example
@@list = sort @{ $a <=> $b @} @@list;
@end example

The default sort function is cmp, string comparison, which would
sort @code{(1, 2, 10)} into @code{(1, 10, 2)}.  C<<=>>, used above, is
the numerical comparison operator.

If you have a complicated function needed to pull out the part you
want to sort on, then don@'t do it inside the sort function.  Pull it
out first, because the sort BLOCK can be called many times for the
same element.  Here@'s an example of how to pull out the first word
after the first number on each item, and then sort those words
case-insensitively.


@example
@@idx = ();
for (@@data) @{
        ($item) = /\d+\s*(\S+)/;
        push @@idx, uc($item);
@}
@@sorted = @@data[ sort @{ $idx[$a] cmp $idx[$b] @} 0 .. $#idx ];
@end example

Which could also be written this way, using a trick
that@'s come to be known as the Schwartzian Transform:


@example
@@sorted = map  @{ $_->[0] @}
              sort @{ $a->[1] cmp $b->[1] @}
              map  @{ [ $_, uc((/\d+\s*(\S+)/ )[0] ] @} @@data;
@end example

If you need to sort on several fields, the following paradigm is useful.


@example
@@sorted = sort @{ field1($a) <=> field1($b) ||
                 field2($a) cmp field2($b) ||
                 field3($a) cmp field3($b)
               @}     @@data;
@end example

This can be conveniently combined with precalculation of keys as given
above.

See http://www.perl.com/CPAN/doc/FMTEYEWTK/sort.html for more about
this approach.

See also the question below on sorting hashes.

@unnumberedsubsec How do I manipulate arrays of bits?
Use pack() and unpack(), or else vec() and the bitwise operations.

For example, this sets $vec to have bit N set if $ints[N] was set:


@example
$vec = @'@';
foreach(@@ints) @{ vec($vec,$_,1) = 1 @}
@end example

And here@'s how, given a vector in $vec, you can
get those bits into your @@ints array:


@example
sub bitvec_to_list @{
        my $vec = shift;
        my @@ints;
        # Find null-byte density then select best algorithm
        if ($vec =~ tr/\0// / length $vec > 0.95) @{
            use integer;
            my $i;
            # This method is faster with mostly null-bytes
            while($vec =~ /[^\0]/g ) @{
                $i = -9 + 8 * pos $vec;
                push @@ints, $i if vec($vec, ++$i, 1);
                push @@ints, $i if vec($vec, ++$i, 1);
                push @@ints, $i if vec($vec, ++$i, 1);
                push @@ints, $i if vec($vec, ++$i, 1);
                push @@ints, $i if vec($vec, ++$i, 1);
                push @@ints, $i if vec($vec, ++$i, 1);
                push @@ints, $i if vec($vec, ++$i, 1);
                push @@ints, $i if vec($vec, ++$i, 1);
            @}
        @} else @{
            # This method is a fast general algorithm
            use integer;
            my $bits = unpack "b*", $vec;
            push @@ints, 0 if $bits =~ s/^(\d)// && $1;
            push @@ints, pos $bits while($bits =~ /1/g);
        @}
        return \@@ints;
@}
@end example

This method gets faster the more sparse the bit vector is.
(Courtesy of Tim Bunce and Winfried Koenig.)

@unnumberedsubsec Why does defined() return true on empty arrays and hashes?
See @samp{defined}, @xref{perlfunc,Perlfunc}, in the 5.004 release or later of Perl.

@unnumberedsec Data: Hashes (Associative Arrays)
@unnumberedsubsec How do I process an entire hash?
Use the each() function (see @samp{each}, @xref{perlfunc,Perlfunc},) if you don@'t care
whether it@'s sorted:


@example
while (($key,$value) = each %hash) @{
        print "$key = $value\n";
@}
@end example

If you want it sorted, you@'ll have to use foreach() on the result of
sorting the keys as shown in an earlier question.

@unnumberedsubsec What happens if I add or remove keys from a hash while iterating over it?
Don@'t do that.

@unnumberedsubsec How do I look up a hash element by value?
Create a reverse hash:


@example
%by_value = reverse %by_key;
$key = $by_value@{$value@};
@end example

That@'s not particularly efficient.  It would be more space-efficient
to use:


@example
while (($key, $value) = each %by_key) @{
        $by_value@{$value@} = $key;
@}
@end example

If your hash could have repeated values, the methods above will only
find one of the associated keys.   This may or may not worry you.

@unnumberedsubsec How can I know how many entries are in a hash?
If you mean how many keys, then all you have to do is
take the scalar sense of the keys() function:


@example
$num_keys = scalar keys %hash;
@end example

In void context it just resets the iterator, which is faster
for tied hashes.

@unnumberedsubsec How do I sort a hash (optionally by value instead of key)?
Internally, hashes are stored in a way that prevents you from imposing
an order on key-value pairs.  Instead, you have to sort a list of the
keys or values:


@example
@@keys = sort keys %hash;       # sorted by key
@@keys = sort @{
                    $hash@{$a@} cmp $hash@{$b@}
            @} keys %hash;      # and by value
@end example

Here we@'ll do a reverse numeric sort by value, and if two keys are
identical, sort by length of key, and if that fails, by straight ASCII
comparison of the keys (well, possibly modified by your locale -- see
@xref{perllocale,Perllocale},).


@example
@@keys = sort @{
                $hash@{$b@} <=> $hash@{$a@}
                          ||
                length($b) <=> length($a)
                          ||
                      $a cmp $b
@} keys %hash;
@end example

@unnumberedsubsec How can I always keep my hash sorted?
You can look into using the DB_File module and tie() using the
$DB_BTREE hash bindings as documented in @samp{DB_File} in this node.

@unnumberedsubsec What@'s the difference between "delete" and "undef" with hashes?
Hashes are pairs of scalars: the first is the key, the second is the
value.  The key will be coerced to a string, although the value can be
any kind of scalar: string, number, or reference.  If a key @code{$key} is
present in the array, @code{exists($key)} will return true.  The value for
a given key can be undef, in which case @code{$array@{$key@}} will be
undef while @code{$exists@{$key@}} will return true.  This corresponds to
(@code{$key}, undef) being in the hash.

Pictures help...  here@'s the @code{%ary} table:


@example
keys  values
        +------+------+
        |  a   |  3   |
        |  x   |  7   |
        |  d   |  0   |
        |  e   |  2   |
        +------+------+
@end example

And these conditions hold


@example
$ary@{@'a@'@}                       is true
$ary@{@'d@'@}                       is false
defined $ary@{@'d@'@}               is true
defined $ary@{@'a@'@}               is true
exists $ary@{@'a@'@}                is true (perl5 only)
grep ($_ eq @'a@', keys %ary)     is true
@end example

If you now say


@example
undef $ary@{@'a@'@}
@end example

your table now reads:


@example
keys  values
        +------+------+
        |  a   | undef|
        |  x   |  7   |
        |  d   |  0   |
        |  e   |  2   |
        +------+------+
@end example

and these conditions now hold; changes in caps:


@example
$ary@{@'a@'@}                       is FALSE
$ary@{@'d@'@}                       is false
defined $ary@{@'d@'@}               is true
defined $ary@{@'a@'@}               is FALSE
exists $ary@{@'a@'@}                is true (perl5 only)
grep ($_ eq @'a@', keys %ary)     is true
@end example

Notice the last two: you have an undef value, but a defined key!

Now, consider this:


@example
delete $ary@{@'a@'@}
@end example

your table now reads:


@example
keys  values
        +------+------+
        |  x   |  7   |
        |  d   |  0   |
        |  e   |  2   |
        +------+------+
@end example

and these conditions now hold; changes in caps:


@example
$ary@{@'a@'@}                       is false
$ary@{@'d@'@}                       is false
defined $ary@{@'d@'@}               is true
defined $ary@{@'a@'@}               is false
exists $ary@{@'a@'@}                is FALSE (perl5 only)
grep ($_ eq @'a@', keys %ary)     is FALSE
@end example

See, the whole entry is gone!

@unnumberedsubsec Why don@'t my tied hashes make the defined/exists distinction?
They may or may not implement the EXISTS() and DEFINED() methods
differently.  For example, there isn@'t the concept of undef with hashes
that are tied to DBM* files. This means the true/false tables above
will give different results when used on such a hash.  It also means
that exists and defined do the same thing with a DBM* file, and what
they end up doing is not what they do with ordinary hashes.

@unnumberedsubsec How do I reset an each() operation part-way through?
Using @code{keys %hash} in a scalar context returns the number of keys in
the hash @emph{and} resets the iterator associated with the hash.  You may
need to do this if you use last to exit a loop early so that when you
re-enter it, the hash iterator has been reset.

@unnumberedsubsec How can I get the unique keys from two hashes?
First you extract the keys from the hashes into arrays, and then solve
the uniquifying the array problem described above.  For example:


@example
%seen = ();
for $element (keys(%foo), keys(%bar)) @{
        $seen@{$element@}++;
@}
@@uniq = keys %seen;
@end example

Or more succinctly:


@example
@@uniq = keys %@{@{%foo,%bar@}@};
@end example

Or if you really want to save space:


@example
%seen = ();
while (defined ($key = each %foo)) @{
    $seen@{$key@}++;
@}
while (defined ($key = each %bar)) @{
    $seen@{$key@}++;
@}
@@uniq = keys %seen;
@end example

@unnumberedsubsec How can I store a multidimensional array in a DBM file?
Either stringify the structure yourself (no fun), or else
get the MLDBM (which uses Data::Dumper) module from CPAN and layer
it on top of either DB_File or GDBM_File.

@unnumberedsubsec How can I make my hash remember the order I put elements into it?
Use the Tie::IxHash from CPAN.


@example
use Tie::IxHash;
tie(%myhash, Tie::IxHash);
for ($i=0; $i<20; $i++) @{
    $myhash@{$i@} = 2*$i;
@}
@@keys = keys %myhash;
# @@keys = (0,1,2,3,...)
@end example

@unnumberedsubsec Why does passing a subroutine an undefined element in a hash create it?
If you say something like:


@example
somefunc($hash@{"nonesuch key here"@});
@end example

Then that element "autovivifies"; that is, it springs into existence
whether you store something there or not.  That@'s because functions
get scalars passed in by reference.  If somefunc() modifies @code{$_[0]},
it has to be ready to write it back into the caller@'s version.

This has been fixed as of perl5.004.

Normally, merely accessing a key@'s value for a nonexistent key does
@emph{not} cause that key to be forever there.  This is different than
awk@'s behavior.

@unnumberedsubsec How can I make the Perl equivalent of a C structure/C++ class/hash or array of hashes or arrays?
Use references (documented in @xref{perlref,Perlref},).  Examples of complex data
structures are given in @xref{perldsc,Perldsc}, and @xref{perllol,Perllol}.  Examples of
structures and object-oriented classes are in @xref{perltoot,Perltoot}.

@unnumberedsubsec How can I use a reference as a hash key?
You can@'t do this directly, but you could use the standard Tie::Refhash
module distributed with perl.

@unnumberedsec Data: Misc
@unnumberedsubsec How do I handle binary data correctly?
Perl is binary clean, so this shouldn@'t be a problem.  For example,
this works fine (assuming the files are found):


@example
if (@`cat /vmunix@` =~ /gzip/) @{
        print "Your kernel is GNU-zip enabled!\n";
@}
@end example

On some systems, however, you have to play tedious games with "text"
versus "binary" files.  See @samp{"binmode"}, @xref{perlfunc,Perlfunc}.

If you@'re concerned about 8-bit ASCII data, then see @xref{perllocale,Perllocale}.

If you want to deal with multibyte characters, however, there are
some gotchas.  See the section on Regular Expressions.

@unnumberedsubsec How do I determine whether a scalar is a number/whole/integer/float?
Assuming that you don@'t care about IEEE notations like "NaN" or
"Infinity", you probably just want to use a regular expression.


@example
warn "has nondigits"        if     /\D/;
warn "not a whole number"   unless /^\d+$/;
warn "not an integer"       unless /^-?\d+$/;  # reject +3
warn "not an integer"       unless /^[+-]?\d+$/;
warn "not a decimal number" unless /^-?\d+\.?\d*$/;  # rejects .2
warn "not a decimal number" unless /^-?(?:\d+(?:\.\d*)?|\.\d+)$/;
warn "not a C float"
    unless /^([+-]?)(?=\d|\.\d)\d*(\.\d*)?([Ee]([+-]?\d+))?$/;
@end example

Or you could check out
http://www.perl.com/CPAN/modules/by-module/String/String-Scanf-1.1.tar.gz
instead.  The POSIX module (part of the standard Perl distribution)
provides the @code{strtol} and @code{strtod} for converting strings to double
and longs, respectively.

@unnumberedsubsec How do I keep persistent data across program calls?
For some specific applications, you can use one of the DBM modules.
See @samp{AnyDBM_File} in this node.  More generically, you should consult the
FreezeThaw, Storable, or Class::Eroot modules from CPAN.

@unnumberedsubsec How do I print out or copy a recursive data structure?
The Data::Dumper module on CPAN is nice for printing out
data structures, and FreezeThaw for copying them.  For example:


@example
use FreezeThaw qw(freeze thaw);
$new = thaw freeze $old;
@end example

Where $old can be (a reference to) any kind of data structure you@'d like.
It will be deeply copied.

@unnumberedsubsec How do I define methods for every class/object?
Use the UNIVERSAL class (see @samp{UNIVERSAL} in this node).

@unnumberedsubsec How do I verify a credit card checksum?
Get the Business::CreditCard module from CPAN.

@unnumberedsec AUTHOR AND COPYRIGHT
Copyright (c) 1997 Tom Christiansen and Nathan Torkington.
All rights reserved.  See @xref{perlfaq,Perlfaq}, for distribution information.

